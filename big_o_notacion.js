// Big O Notation
//  Классическое понятие - 
// Асимптотическая сложность алгоритма -
// О(n), где n - размер входных данных
// Иными словами - способ описать, как будет расти время
// выполнения алгоритма в зависимости от роста входных данных

// Константная сложность 0(1) Время выполнения не зависит от размера данных

function getFirstElement(arr) {
    return arr[0];
}
console.log(getFirstElement([1, 2, 3, 4, 5]));

// Результат кода: 1

const array2 = new Array(10000000).fill("test");
console.log(getFirstElement(array2));

// Результат кода: test

// Линейная сложность О(n) Время выполнения растёт линейно с ростом входных данных
// если 'n' удваивается, время выполнения тоже удваивается
console.log("----O(n) Линейная сложность---");

// Пример - найти сумму всех чисел в массиве
// чтобы найти сумму, нужно пройтись по КАЖДОМУ элементу массива

function sumArray(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i];
    }
    return sum;
}

console.log(sumArray([1, 2, 3, 4, 5]));

// Результат 15

const array1 = new Array(1000000).fill(1);
console.log(sumArray(array1));

// Результат 1000000

// O(n^2) - Квадратичная сложность
// Время выполнения растёт квадратично с ростом входных данных
// усли 'n' удваивается, время выполнения увеличивается в 4 раза
console.log("---O(n^2) Квадратичная сложность");

// Пример - найти все дубликаты в массиве

function hasDuplicates(arr) {
    const  n = arr.length;
    for (let i = 0; i < n; i++) { //Внешний цикл выполняется n раз
        for(let j = i + 1; j < n; j++) { //Внутренний цикл тоже выполняется n раз
            if(i !== j && arr[i] === arr[j]) {
                return true; //Найден дубликат
            }
        }
    }
    return false; // Дубликаты не найдены
}

console.log(hasDuplicates([1, 2, 3, 4, 5]));//false
console.log(hasDuplicates([1, 2, 3, 4, 5, 3])); //true

// логарифмическая сложность O(log n)
// Время выполнения растет логарифмически с ростом входных данных
// если 'n' удваивается, время выполнения увеливается на 1
console.log("---O(log.n) Логарифмическая сложность");

/**
 * Пример = бинарный поиск в отсортированном массиве
 * Бинарный поиск работает по принципу "разделяй и властвуй"
 * Он делит массив пополам и определяет, в какой половине
 * может находиться искомый элемент, затем повторяет процесс для этой половины.
 */